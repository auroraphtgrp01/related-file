/**
 * Script Frida ƒë·ªÉ debug v√† l·∫•y log khi ƒë·ªìng b·ªô d·ªØ li·ªáu gi·∫•c ng·ªß t·ª´ nh·∫´n qua BLE
 * T·∫≠p trung v√†o vi·ªác b·∫Øt v√† ph√¢n t√≠ch c√°c g√≥i tin li√™n quan ƒë·∫øn gi·∫•c ng·ªß
 * Phi√™n b·∫£n c·∫£i ti·∫øn: Th√™m nhi·ªÅu hook h∆°n v√† log chi ti·∫øt h∆°n
 */

Java.perform(function() {
    console.log("üöÄ B·∫Øt ƒë·∫ßu script debug d·ªØ li·ªáu gi·∫•c ng·ªß t·ª´ nh·∫´n th√¥ng minh (phi√™n b·∫£n hook s√¢u c·∫£i ti·∫øn)");
    
    // Th√™m log ƒë·ªÉ x√°c nh·∫≠n script ƒëang ch·∫°y m·ªói 5 gi√¢y
    setInterval(function() {
        console.log("‚è±Ô∏è Script v·∫´n ƒëang ch·∫°y... " + new Date().toISOString());
    }, 5000);

    // T√¨m c√°c l·ªõp c·∫ßn thi·∫øt
    var DataUnpack = null;
    var YCBTClient = null;
    var SleepResponse = null;
    var BluetoothLeService = null;
    var BleManager = null;

    try {
        DataUnpack = Java.use("com.yucheng.ycbtsdk.core.DataUnpack");
        console.log("‚úÖ ƒê√£ t√¨m th·∫•y l·ªõp DataUnpack");
    } catch (e) {
        console.log("‚ùå Kh√¥ng t√¨m th·∫•y l·ªõp DataUnpack: " + e);
    }

    try {
        YCBTClient = Java.use("com.yucheng.ycbtsdk.YCBTClient");
        console.log("‚úÖ ƒê√£ t√¨m th·∫•y l·ªõp YCBTClient");
    } catch (e) {
        console.log("‚ùå Kh√¥ng t√¨m th·∫•y l·ªõp YCBTClient: " + e);
    }

    try {
        SleepResponse = Java.use("com.yucheng.smarthealthpro.home.bean.SleepResponse");
        console.log("‚úÖ ƒê√£ t√¨m th·∫•y l·ªõp SleepResponse");
    } catch (e) {
        console.log("‚ùå Kh√¥ng t√¨m th·∫•y l·ªõp SleepResponse: " + e);
    }
    
    try {
        BluetoothLeService = Java.use("com.yucheng.ycbtsdk.service.BluetoothLeService");
        console.log("‚úÖ ƒê√£ t√¨m th·∫•y l·ªõp BluetoothLeService");
    } catch (e) {
        console.log("‚ùå Kh√¥ng t√¨m th·∫•y l·ªõp BluetoothLeService: " + e);
    }
    
    try {
        BleManager = Java.use("com.yucheng.ycbtsdk.ble.BleManager");
        console.log("‚úÖ ƒê√£ t√¨m th·∫•y l·ªõp BleManager");
    } catch (e) {
        console.log("‚ùå Kh√¥ng t√¨m th·∫•y l·ªõp BleManager: " + e);
    }

    // H√†m chuy·ªÉn ƒë·ªïi m·∫£ng byte sang chu·ªói hex
    function byteArrayToHex(byteArray) {
        if (!byteArray) return "null";
        var hex = "";
        for (var i = 0; i < byteArray.length; i++) {
            var b = byteArray[i] & 0xFF;
            hex += (b < 16 ? "0" : "") + b.toString(16) + " ";
        }
        return hex.trim();
    }
    
    // H√†m chuy·ªÉn ƒë·ªïi m·∫£ng byte sang base64
    function byteArrayToBase64(byteArray) {
        if (!byteArray) return "null";
        try {
            var Base64 = Java.use("android.util.Base64");
            return Base64.encodeToString(byteArray, 0);
        } catch (e) {
            return "Kh√¥ng th·ªÉ chuy·ªÉn ƒë·ªïi sang base64: " + e;
        }
    }
    
    // H√†m l∆∞u raw data v√†o file
    function saveRawData(data, prefix) {
        if (!data) return;
        try {
            var File = Java.use("java.io.File");
            var FileOutputStream = Java.use("java.io.FileOutputStream");
            var timestamp = new Date().getTime();
            var filename = "/sdcard/" + prefix + "_" + timestamp + ".bin";
            
            var file = File.$new(filename);
            var fos = FileOutputStream.$new(file);
            fos.write(data);
            fos.close();
            
            console.log("üíæ ƒê√£ l∆∞u raw data v√†o: " + filename);
            return filename;
        } catch (e) {
            console.log("‚ùå L·ªói khi l∆∞u raw data: " + e);
            return null;
        }
    }

    // H√†m ƒë·ªãnh d·∫°ng th·ªùi gian t·ª´ timestamp
    function formatTimestamp(timestamp) {
        try {
            // Chuy·ªÉn ƒë·ªïi timestamp theo c√¥ng th·ª©c: (timestamp + 946684800) * 1000
            var timeInMs = (timestamp + 946684800) * 1000;
            var date = new Date(timeInMs);
            return date.toISOString() + " (UTC+0)";
        } catch (e) {
            return "L·ªói ƒë·ªãnh d·∫°ng timestamp: " + e;
        }
    }

    // H√†m ƒë·ªãnh d·∫°ng th·ªùi l∆∞·ª£ng (gi√¢y -> h:m:s)
    function formatDuration(seconds) {
        var hours = Math.floor(seconds / 3600);
        var minutes = Math.floor((seconds % 3600) / 60);
        var secs = seconds % 60;
        return hours + "h " + minutes + "m " + secs + "s";
    }

    // H√†m log stacktrace
    function logStackTrace() {
        try {
            var Exception = Java.use('java.lang.Exception');
            var e = Exception.$new();
            var stack = e.getStackTrace();
            var trace = "";
            for (var i = 0; i < stack.length; i++) {
                trace += "\n  at " + stack[i].toString();
            }
            console.log("[STACKTRACE]" + trace);
        } catch (err) {
            console.log("[STACKTRACE] L·ªói khi l·∫•y stacktrace: " + err);
        }
    }

    // H√†m ph√¢n t√≠ch chi ti·∫øt g√≥i sleep
    function analyzeSleepPacketDetail(data) {
        if (!data || data.length < 12) return "G√≥i d·ªØ li·ªáu qu√° ng·∫Øn ƒë·ªÉ ph√¢n t√≠ch";

        try {
            var cmd1 = data[0] & 0xFF;
            var cmd2 = data[1] & 0xFF;
            var packetType = "0x" + cmd1.toString(16) + " 0x" + cmd2.toString(16);
            var length = (data[2] & 0xFF) | ((data[3] & 0xFF) << 8);

            var startTimeRaw = (data[4] & 0xFF) | ((data[5] & 0xFF) << 8) | 
                              ((data[6] & 0xFF) << 16) | ((data[7] & 0xFF) << 24);
            var endTimeRaw = (data[8] & 0xFF) | ((data[9] & 0xFF) << 8) | 
                            ((data[10] & 0xFF) << 16) | ((data[11] & 0xFF) << 24);

            var result = "üìä Chi ti·∫øt g√≥i " + packetType + ":\n";
            result += "  - ƒê·ªô d√†i: " + length + " bytes\n";
            result += "  - Start time raw: 0x" + startTimeRaw.toString(16) + " (" + startTimeRaw + ")\n";
            result += "  - End time raw: 0x" + endTimeRaw.toString(16) + " (" + endTimeRaw + ")\n";
            result += "  - Start time: " + formatTimestamp(startTimeRaw) + "\n";
            result += "  - End time: " + formatTimestamp(endTimeRaw) + "\n";

            // Ph√¢n t√≠ch c√°c tr∆∞·ªùng t·ªïng h·ª£p n·∫øu c√≥
            if (data.length >= 28) {
                var deepCount = (data[12] & 0xFF) | ((data[13] & 0xFF) << 8);
                var lightCount = (data[14] & 0xFF) | ((data[15] & 0xFF) << 8);
                var awakeCount = (data[16] & 0xFF) | ((data[17] & 0xFF) << 8);
                var deepTotal = (data[18] & 0xFF) | ((data[19] & 0xFF) << 8);
                var lightTotal = (data[20] & 0xFF) | ((data[21] & 0xFF) << 8);
                var awakeTotal = (data[22] & 0xFF) | ((data[23] & 0xFF) << 8);
                var remTotal = (data[24] & 0xFF) | ((data[25] & 0xFF) << 8);
                var wakeTimes = (data[26] & 0xFF) | ((data[27] & 0xFF) << 8);

                result += "  - Deep sleep count: " + deepCount + "\n";
                result += "  - Light sleep count: " + lightCount + "\n";
                result += "  - Awake count: " + awakeCount + "\n";
                result += "  - Deep sleep total: " + deepTotal + " ph√∫t\n";
                result += "  - Light sleep total: " + lightTotal + " ph√∫t\n";
                result += "  - Awake total: " + awakeTotal + " ph√∫t\n";
                result += "  - REM total: " + remTotal + " ph√∫t\n";
                result += "  - Wake times: " + wakeTimes + "\n";
            }

            // Ph√¢n t√≠ch c√°c block sleep stage n·∫øu c√≥
            if (data.length > 28) {
                result += "  - Chi ti·∫øt c√°c giai ƒëo·∫°n gi·∫•c ng·ªß:\n";
                var offset = 28;
                var blockCount = 0;

                while (offset + 8 <= data.length) {
                    var sleepType = data[offset] & 0xFF;
                    var startTime = (data[offset + 1] & 0xFF) | ((data[offset + 2] & 0xFF) << 8) | 
                                   ((data[offset + 3] & 0xFF) << 16) | ((data[offset + 4] & 0xFF) << 24);
                    var duration = (data[offset + 5] & 0xFF) | ((data[offset + 6] & 0xFF) << 8) | 
                                  ((data[offset + 7] & 0xFF) << 16);

                    var sleepTypeStr = "";
                    switch (sleepType) {
                        case 241: sleepTypeStr = "Deep Sleep"; break;
                        case 242: sleepTypeStr = "Light Sleep"; break;
                        case 243: sleepTypeStr = "REM"; break;
                        case 244: sleepTypeStr = "Awake"; break;
                        default: sleepTypeStr = "Unknown (" + sleepType + ")";
                    }

                    result += "    Block " + (++blockCount) + ": " + sleepTypeStr + "\n";
                    result += "      Start: " + formatTimestamp(startTime) + "\n";
                    result += "      Duration: " + formatDuration(duration) + "\n";

                    offset += 8;
                }
            }

            return result;
        } catch (e) {
            return "‚ùå L·ªói khi ph√¢n t√≠ch chi ti·∫øt: " + e;
        }
    }

    // H√†m ph√¢n t√≠ch lo·∫°i g√≥i tin gi·∫•c ng·ªß
    function analyzeSleepPacket(bytes) {
        if (!bytes || bytes.length < 2) return "Kh√¥ng x√°c ƒë·ªãnh";
        var cmd1 = bytes[0] & 0xFF;
        var cmd2 = bytes[1] & 0xFF;
        if (cmd1 === 5) {
            switch (cmd2) {
                case 0x02: return "L·ªánh l·∫•y tr·∫°ng th√°i gi·∫•c ng·ªß (0x05 02)";
                case 0x04: return "L·ªánh l·∫•y d·ªØ li·ªáu gi·∫•c ng·ªß g·∫ßn ƒë√¢y (0x05 04)";
                case 0x06: return "L·ªánh l·∫•y th√¥ng tin th·ªëng k√™ gi·∫•c ng·ªß (0x05 06)";
                case 0x08: return "L·ªánh l·∫•y chi ti·∫øt c√°c giai ƒëo·∫°n gi·∫•c ng·ªß (0x05 08)";
                case 0x09: return "L·ªánh l·∫•y th√¥ng tin gi·∫•c ng·ªß chi ti·∫øt (0x05 09)";
                case 0x11: return "D·ªØ li·ªáu gi·∫•c ng·ªß c∆° b·∫£n (0x05 11)";
                case 0x13: return "D·ªØ li·ªáu gi·∫•c ng·ªß chi ti·∫øt theo gi·ªù (0x05 13)";
                case 0x15: return "D·ªØ li·ªáu t·ªïng h·ª£p gi·∫•c ng·ªß (0x05 15)";
                case 0x17: return "D·ªØ li·ªáu gi·∫•c ng·ªß l·ªãch s·ª≠ (0x05 17)";
                case 0x18: return "D·ªØ li·ªáu chi ti·∫øt gi·∫•c ng·ªß l·ªãch s·ª≠ (0x05 18)";
                case 0x80: return "X√≥a d·ªØ li·ªáu gi·∫•c ng·ªß (0x05 80)";
                default: return "G√≥i sleep kh√°c: 0x" + cmd1.toString(16) + " 0x" + cmd2.toString(16);
            }
        } else if (cmd1 === 6 && cmd2 === 0) {
            return "D·ªØ li·ªáu gi·∫•c ng·ªß th·ªùi gian th·ª±c (0x06 00)";
        }
        return "Kh√¥ng ph·∫£i g√≥i tin gi·∫•c ng·ªß";
    }

    // Danh s√°ch c√°c h√†m unpack sleep c·∫ßn hook s√¢u
    var unpackSleepMethods = [
        {name: "unpackHealthData", overload: ["[B", "int"]},
        {name: "unpackSleepDetailData", overload: ["[B"]},
        {name: "unpackSleepStagesData", overload: ["[B"]},
        {name: "unpackGetSleepStatus", overload: ["[B"]},
        {name: "unpackSleepDataRealTime", overload: ["[B"]}
    ];

    // Hook c√°c h√†m unpack sleep
    if (DataUnpack) {
        unpackSleepMethods.forEach(function(method) {
            try {
                var m = DataUnpack[method.name];
                if (!m) return;
                if (method.overload.length === 2) {
                    m.overload(method.overload[0], method.overload[1]).implementation = function(data, type) {
                        console.log("\n============================");
                        console.log("üì• CALL: " + method.name + "(" + byteArrayToHex(data) + ", type=" + type + ")");
                        console.log("üìã Ph√¢n t√≠ch: " + analyzeSleepPacket(data));
                        console.log("üì¶ RAW DATA (Base64): " + byteArrayToBase64(data));
                        saveRawData(data, method.name + "_type" + type);

                        if (method.name === "unpackHealthData" && type === 4) {
                            // Type 4 l√† sleep data
                            console.log(analyzeSleepPacketDetail(data));
                        }

                        logStackTrace();
                        var result = this[method.name](data, type);
                        try {
                            console.log("üì§ K·∫øt qu·∫£: " + JSON.stringify(result));
                        } catch (e) {
                            console.log("üì§ K·∫øt qu·∫£: " + result);
                        }
                        return result;
                    };
                } else {
                    m.overload(method.overload[0]).implementation = function(data) {
                        console.log("\n============================");
                        console.log("üì• CALL: " + method.name + "(" + byteArrayToHex(data) + ")");
                        console.log("üìã Ph√¢n t√≠ch: " + analyzeSleepPacket(data));
                        console.log("üì¶ RAW DATA (Base64): " + byteArrayToBase64(data));
                        saveRawData(data, method.name);
                        console.log(analyzeSleepPacketDetail(data));
                        logStackTrace();
                        var result = this[method.name](data);
                        try {
                            console.log("üì§ K·∫øt qu·∫£: " + JSON.stringify(result));
                        } catch (e) {
                            console.log("üì§ K·∫øt qu·∫£: " + result);
                        }
                        return result;
                    };
                }
                console.log("‚úÖ ƒê√£ hook s√¢u " + method.name);
            } catch (e) {
                console.log("‚ùå Kh√¥ng th·ªÉ hook s√¢u " + method.name + ": " + e);
            }
        });
    }

    // Hook YCBTClient ƒë·ªÉ b·∫Øt c√°c l·ªánh li√™n quan ƒë·∫øn sleep
    if (YCBTClient) {
        try {
            // Hook t·∫•t c·∫£ c√°c ph∆∞∆°ng th·ª©c c√≥ th·ªÉ li√™n quan ƒë·∫øn gi·∫•c ng·ªß
            var sleepMethods = [
                "getSleepStatus",
                "healthHistoryData",
                "getSleepData",
                "getSleepDetailData",
                "getSleepStagesData",
                "getSleepHistoryData",
                "deleteSleepData",
                "startSleepMonitoring",
                "stopSleepMonitoring"
            ];
            
            sleepMethods.forEach(function(methodName) {
                if (YCBTClient[methodName]) {
                    var originalMethod = YCBTClient[methodName];
                    
                    // L·∫•y t·∫•t c·∫£ c√°c overload c·ªßa ph∆∞∆°ng th·ª©c
                    var overloads = originalMethod.overloads;
                    if (overloads) {
                        for (var i = 0; i < overloads.length; i++) {
                            overloads[i].implementation = function() {
                                console.log("\n============================");
                                console.log("üì± CALL: YCBTClient." + methodName + "() v·ªõi " + arguments.length + " tham s·ªë");
                                
                                // Log t·∫•t c·∫£ c√°c tham s·ªë
                                for (var j = 0; j < arguments.length; j++) {
                                    console.log("   Tham s·ªë " + j + ": " + arguments[j]);
                                }
                                
                                logStackTrace();
                                
                                // G·ªçi ph∆∞∆°ng th·ª©c g·ªëc
                                var result = this[methodName].apply(this, arguments);
                                console.log("üì§ K·∫øt qu·∫£ tr·∫£ v·ªÅ: " + result);
                                return result;
                            };
                        }
                        console.log("‚úÖ ƒê√£ hook th√†nh c√¥ng ph∆∞∆°ng th·ª©c YCBTClient." + methodName + " v·ªõi " + overloads.length + " overload");
                    } else {
                        console.log("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y overload cho ph∆∞∆°ng th·ª©c " + methodName);
                    }
                } else {
                    console.log("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y ph∆∞∆°ng th·ª©c " + methodName + " trong YCBTClient");
                }
            });
            
            // Hook c·ª• th·ªÉ cho m·ªôt s·ªë ph∆∞∆°ng th·ª©c quan tr·ªçng
            if (YCBTClient.getSleepStatus) {
                YCBTClient.getSleepStatus.implementation = function(callback) {
                    console.log("\n============================");
                    console.log("üì± CALL: YCBTClient.getSleepStatus()");
                    logStackTrace();
                    console.log("üì• CALL: YCBTClient.getSleepStatus - L·∫•y tr·∫°ng th√°i gi·∫•c ng·ªß");
                    
                    // T·∫°o m·ªôt wrapper callback ƒë·ªÉ log k·∫øt qu·∫£
                    var wrappedCallback = Java.use('com.yucheng.ycbtsdk.response.BleDataResponse').$new();
                    
                    wrappedCallback.onDataResponse = function(code, data) {
                        console.log("üì± CALLBACK: getSleepStatus v·ªõi code=" + code);
                        console.log("üì± CALLBACK DATA: " + JSON.stringify(data));
                        
                        // G·ªçi callback g·ªëc
                        if (callback) {
                            callback.onDataResponse(code, data);
                        }
                    };
                    
                    return this.getSleepStatus(wrappedCallback);
                };
                console.log("‚úÖ ƒê√£ hook s√¢u ph∆∞∆°ng th·ª©c YCBTClient.getSleepStatus v·ªõi callback wrapper");
            }
            
            if (YCBTClient.healthHistoryData) {
                YCBTClient.healthHistoryData.implementation = function(type, callback) {
                    console.log("\n============================");
                    console.log("üì• CALL: YCBTClient.healthHistoryData v·ªõi type=" + type);
                    if (type === 4) {
                        console.log("üõå ƒêang l·∫•y d·ªØ li·ªáu l·ªãch s·ª≠ gi·∫•c ng·ªß");
                    }
                    logStackTrace();
                    
                    // T·∫°o m·ªôt wrapper callback ƒë·ªÉ log k·∫øt qu·∫£
                    var wrappedCallback = Java.use('com.yucheng.ycbtsdk.response.BleDataResponse').$new();
                    
                    wrappedCallback.onDataResponse = function(code, data) {
                        console.log("üì± CALLBACK: healthHistoryData v·ªõi code=" + code + ", type=" + type);
                        console.log("üì± CALLBACK DATA: " + JSON.stringify(data));
                        
                        // G·ªçi callback g·ªëc
                        if (callback) {
                            callback.onDataResponse(code, data);
                        }
                    };
                    
                    return this.healthHistoryData(type, wrappedCallback);
                };
                console.log("‚úÖ ƒê√£ hook s√¢u ph∆∞∆°ng th·ª©c YCBTClient.healthHistoryData v·ªõi callback wrapper");
            }
        } catch (e) {
            console.log("‚ùå L·ªói khi hook c√°c ph∆∞∆°ng th·ª©c YCBTClient: " + e);
        }
    }
    
    // Hook BluetoothGattCallback ƒë·ªÉ theo d√µi t·∫•t c·∫£ c√°c g√≥i tin Bluetooth
    try {
        var BluetoothGattCallback = Java.use("android.bluetooth.BluetoothGattCallback");
        
        // Theo d√µi khi nh·∫≠n d·ªØ li·ªáu t·ª´ thi·∫øt b·ªã
        BluetoothGattCallback.onCharacteristicChanged.overload(
            'android.bluetooth.BluetoothGatt', 
            'android.bluetooth.BluetoothGattCharacteristic'
        ).implementation = function(gatt, characteristic) {
            try {
                var deviceName = gatt.getDevice().getName();
                var uuid = characteristic.getUuid().toString();
                var value = characteristic.getValue();
                
                if (value && value.length > 0) {
                    var hexValue = byteArrayToHex(value);
                    
                    if (value[0] === 5) { // G√≥i tin li√™n quan ƒë·∫øn gi·∫•c ng·ªß
                        console.log("\n============================");
                        console.log(" BLE [NH·∫¨N] t·ª´ " + deviceName);
                        console.log(" UUID: " + uuid);
                        console.log(" D·ªØ li·ªáu: " + hexValue);
                        console.log(" Ph√¢n t√≠ch: " + analyzeSleepPacket(value));
                        console.log(" RAW DATA (Base64): " + byteArrayToBase64(value));
                        saveRawData(value, "BLE_RECEIVE");
                    }
                }
            } catch (e) {
                console.log(" L·ªói trong onCharacteristicChanged: " + e);
            }
            
            return this.onCharacteristicChanged(gatt, characteristic);
        };
        
        // Theo d√µi khi g·ª≠i d·ªØ li·ªáu ƒë·∫øn thi·∫øt b·ªã
        BluetoothGattCallback.onCharacteristicWrite.overload(
            'android.bluetooth.BluetoothGatt', 
            'android.bluetooth.BluetoothGattCharacteristic', 
            'int'
        ).implementation = function(gatt, characteristic, status) {
            try {
                var deviceName = gatt.getDevice().getName();
                var uuid = characteristic.getUuid().toString();
                var value = characteristic.getValue();
                
                if (value && value.length > 0 && value[0] === 5) {
                    console.log("üì± BLE [G·ª¨I] ƒë·∫øn " + deviceName + " (status: " + status + ")");
                    console.log("üÜî UUID: " + uuid);
                    console.log("üìä D·ªØ li·ªáu: " + byteArrayToHex(value));
                    console.log("üìã Ph√¢n t√≠ch: " + analyzeSleepPacket(value));
                    console.log("üì¶ RAW DATA (Base64): " + byteArrayToBase64(value));
                    saveRawData(value, "BLE_SEND");
                }
            } catch (e) {
                console.log("‚ùå L·ªói trong onCharacteristicWrite: " + e);
            }
            
            return this.onCharacteristicWrite(gatt, characteristic, status);
        };
        
        console.log("‚úÖ ƒê√£ hook th√†nh c√¥ng BluetoothGattCallback");
    } catch (e) {
        console.log("‚ùå L·ªói khi hook BluetoothGattCallback: " + e);
    }
    
    // Hook BluetoothGatt.writeCharacteristic ƒë·ªÉ b·∫Øt l·ªánh g·ª≠i ƒë·∫øn thi·∫øt b·ªã
    try {
        var BluetoothGatt = Java.use("android.bluetooth.BluetoothGatt");
        
        BluetoothGatt.writeCharacteristic.overload(
            'android.bluetooth.BluetoothGattCharacteristic'
        ).implementation = function(characteristic) {
            try {
                var value = characteristic.getValue();
                
                if (value && value.length > 0 && value[0] === 5) {
                    var deviceName = this.getDevice().getName();
                    var uuid = characteristic.getUuid().toString();
                    
                    console.log("üì± BLE [G·ª¨I L·ªÜNH] ƒë·∫øn " + deviceName);
                    console.log("üÜî UUID: " + uuid);
                    console.log("üìä D·ªØ li·ªáu: " + byteArrayToHex(value));
                    console.log("üìã Ph√¢n t√≠ch: " + analyzeSleepPacket(value));
                    console.log("üì¶ RAW DATA (Base64): " + byteArrayToBase64(value));
                    saveRawData(value, "BLE_WRITE_CMD");
                }
            } catch (e) {
                console.log("‚ùå L·ªói trong writeCharacteristic: " + e);
            }
            
            return this.writeCharacteristic(characteristic);
        };
        
        console.log("‚úÖ ƒê√£ hook th√†nh c√¥ng BluetoothGatt.writeCharacteristic");
    } catch (e) {
        console.log("‚ùå L·ªói khi hook BluetoothGatt.writeCharacteristic: " + e);
    }
    
    // Hook c√°c l·ªõp li√™n quan ƒë·∫øn k·∫øt n·ªëi Bluetooth
    if (BluetoothLeService) {
        try {
            // Hook ph∆∞∆°ng th·ª©c connect
            if (BluetoothLeService.connect) {
                BluetoothLeService.connect.implementation = function(address) {
                    console.log("\n============================");
                    console.log("üì± CALL: BluetoothLeService.connect(" + address + ")");
                    logStackTrace();
                    var result = this.connect(address);
                    console.log("üì§ K·∫øt qu·∫£ k·∫øt n·ªëi: " + result);
                    return result;
                };
                console.log("‚úÖ ƒê√£ hook th√†nh c√¥ng ph∆∞∆°ng th·ª©c BluetoothLeService.connect");
            }
            
            // Hook ph∆∞∆°ng th·ª©c sendData
            if (BluetoothLeService.sendData) {
                BluetoothLeService.sendData.implementation = function(data) {
                    console.log("\n============================");
                    console.log("üì± CALL: BluetoothLeService.sendData(" + byteArrayToHex(data) + ")");
                    console.log("üìã Ph√¢n t√≠ch: " + analyzeSleepPacket(data));
                    logStackTrace();
                    var result = this.sendData(data);
                    console.log("üì§ K·∫øt qu·∫£ g·ª≠i d·ªØ li·ªáu: " + result);
                    return result;
                };
                console.log("‚úÖ ƒê√£ hook th√†nh c√¥ng ph∆∞∆°ng th·ª©c BluetoothLeService.sendData");
            }
        } catch (e) {
            console.log("‚ùå L·ªói khi hook c√°c ph∆∞∆°ng th·ª©c BluetoothLeService: " + e);
        }
    }
    
    // Hook BleManager n·∫øu c√≥
    if (BleManager) {
        try {
            // Hook c√°c ph∆∞∆°ng th·ª©c li√™n quan ƒë·∫øn k·∫øt n·ªëi
            var bleManagerMethods = [
                "connect",
                "disconnect",
                "sendData",
                "startScan",
                "stopScan"
            ];
            
            bleManagerMethods.forEach(function(methodName) {
                if (BleManager[methodName]) {
                    BleManager[methodName].implementation = function() {
                        console.log("\n============================");
                        console.log("üì± CALL: BleManager." + methodName + "() v·ªõi " + arguments.length + " tham s·ªë");
                        
                        // Log t·∫•t c·∫£ c√°c tham s·ªë
                        for (var j = 0; j < arguments.length; j++) {
                            if (methodName === "sendData" && j === 0) {
                                console.log("   Tham s·ªë " + j + ": " + byteArrayToHex(arguments[j]));
                                console.log("   Ph√¢n t√≠ch: " + analyzeSleepPacket(arguments[j]));
                            } else {
                                console.log("   Tham s·ªë " + j + ": " + arguments[j]);
                            }
                        }
                        
                        logStackTrace();
                        
                        // G·ªçi ph∆∞∆°ng th·ª©c g·ªëc
                        var result = this[methodName].apply(this, arguments);
                        console.log("üì§ K·∫øt qu·∫£ tr·∫£ v·ªÅ: " + result);
                        return result;
                    };
                    console.log("‚úÖ ƒê√£ hook th√†nh c√¥ng ph∆∞∆°ng th·ª©c BleManager." + methodName);
                }
            });
        } catch (e) {
            console.log("‚ùå L·ªói khi hook c√°c ph∆∞∆°ng th·ª©c BleManager: " + e);
        }
    }
    
    // Hook SleepResponse n·∫øu c√≥
    if (SleepResponse) {
        try {
            // Hook constructor
            SleepResponse.$init.implementation = function() {
                console.log("\n============================");
                console.log("üì± CALL: T·∫°o ƒë·ªëi t∆∞·ª£ng SleepResponse m·ªõi");
                logStackTrace();
                var result = this.$init();
                return result;
            };
            
            // Hook t·∫•t c·∫£ c√°c setter methods
            var methods = SleepResponse.class.getDeclaredMethods();
            for (var i = 0; i < methods.length; i++) {
                var methodName = methods[i].getName();
                if (methodName.startsWith("set")) {
                    try {
                        SleepResponse[methodName].implementation = function() {
                            console.log("üì± CALL: SleepResponse." + this.methodName + "(" + arguments[0] + ")");
                            return this[this.methodName].apply(this, arguments);
                        }.bind({methodName: methodName});
                        console.log("‚úÖ ƒê√£ hook th√†nh c√¥ng ph∆∞∆°ng th·ª©c SleepResponse." + methodName);
                    } catch (e) {
                        console.log("‚ùå L·ªói khi hook ph∆∞∆°ng th·ª©c SleepResponse." + methodName + ": " + e);
                    }
                }
            }
        } catch (e) {
            console.log("‚ùå L·ªói khi hook c√°c ph∆∞∆°ng th·ª©c SleepResponse: " + e);
        }
    }
    
    console.log("üöÄ ƒê√£ ho√†n t·∫•t thi·∫øt l·∫≠p hook. Vui l√≤ng m·ªü ·ª©ng d·ª•ng v√† k·∫øt n·ªëi v·ªõi nh·∫´n th√¥ng minh ƒë·ªÉ b·∫Øt ƒë·∫ßu debug.");
    console.log("üíæ Raw data s·∫Ω ƒë∆∞·ª£c l∆∞u v√†o th∆∞ m·ª•c /sdcard/ tr√™n thi·∫øt b·ªã.");
    console.log("üìù M·ªói g√≥i d·ªØ li·ªáu s·∫Ω ƒë∆∞·ª£c log d∆∞·ªõi d·∫°ng hex v√† base64, ƒë·ªìng th·ªùi l∆∞u th√†nh file binary ƒë·ªÉ ph√¢n t√≠ch sau.");
    console.log("‚ö†Ô∏è N·∫øu kh√¥ng th·∫•y log, h√£y ki·ªÉm tra k·∫øt n·ªëi Bluetooth v√† ƒë·∫£m b·∫£o ·ª©ng d·ª•ng ƒëang ch·∫°y.");
});
